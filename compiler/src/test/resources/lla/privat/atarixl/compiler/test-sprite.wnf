PROGRAM sprite

// Global Variablen

byte COLBK=53274

word x0,y0,x1,y1
word dx,dy
word sx,sy
word e2,err
byte stepx,stepy

word i
word xp, yp
word xend, yend
word xstart, ystart
word adx, ady, sdx, sdy, pdx, pdy,ddx,ddy
word deltaslowdirection, deltafastdirection

procedure line2(xstart, ystart, xend, yend)
begin
// anderer bresenham nach Wikipedia

 // REM Bresenham-Algorithmus für eine Linie in einem beliebigen Oktanten in Pseudo-Basic
 dx := xend-xstart
 dy := yend-ystart

 // REM Initialisierungen
 adx := @ABS(dx)
 ady := @ABS(dy) // ' Absolutbeträge Distanzen
 sdx := @SGN(dx)
 sdy := @SGN(dy) // ' Signum der Distanzen

 IF adx > ady THEN
 begin
   // ' x ist schnelle Richtung
   pdx := sdx
   pdy := 0   // ' pd. ist Parallelschritt
   ddx := sdx
   ddy := sdy //' dd. ist Diagonalschritt
   deltaslowdirection  := ady
   deltafastdirection  := adx // ' Delta in langsamer Richtung, Delta in schneller Richtung
 end
 ELSE
 begin
   // ' y ist schnelle Richtung
   pdx := 0
   pdy := sdy // ' pd. ist Parallelschritt
   ddx := sdx
   ddy := sdy // ' dd. ist Diagonalschritt
   deltaslowdirection  := adx
   deltafastdirection  := ady // ' Delta in langsamer Richtung, Delta in schneller Richtung
 end

 xp := xstart
 yp := ystart
 @plot(xp, yp)
 err := deltafastdirection / 2

 // REM Pixelschleife: immer ein Schritt in schnelle Richtung, hin und wieder auch einer in langsame
 FOR i:=1 TO deltafastdirection do //          ' Anzahl der zu zeichnenden Pixel
 begin
    // REM Aktualisierung Fehlerterm
    err := err - deltaslowdirection
    IF err < 0 THEN
    begin
       err := err + deltafastdirection // ' Fehlerterm wieder positiv machen
       // REM Schritt in langsame Richtung
       xp := xp + ddx
       yp := yp + ddy // ' Diagonalschritt
    end
    ELSE
    begin
       // REM Schritt in schnelle Richtung
       xp := xp + pdx
       yp := yp + pdy // ' Parallelschritt
    END
    @plot(xp, yp)
    // SETPIXEL x,y
  end
end

word x,y

procedure createGitter()
local x,y
begin
  y:=0
  while y < 159 do
  begin
    @setcolor(1)
    line2(0,y,319,y)
    y := y + 10
  end

  x:=0
  while x < 318 do
  begin
    @setcolor(1)
    line2(x,0,x,159)
    x := x + 10
  end
end

byte array mask0[0] = [
%11110000,%00001111,%11111111,
%11000000,%00000011,%11111111,
%10000000,%00000001,%11111111,
%10000000,%00000001,%11111111,
%00000000,%00000000,%11111111,
%00000000,%00000000,%11111111,
%00000000,%00000000,%11111111,
%00000000,%00000000,%11111111,
%00000000,%00000000,%11111111,
%00000000,%00000000,%11111111,
%00000000,%00000000,%11111111,
%00000000,%00000000,%11111111,
%10000000,%00000001,%11111111,
%10000000,%00000001,%11111111,
%11000000,%00000011,%11111111,
%11110000,%00001111,%11111111
]

byte array mask1[0] = [
%11111000,%00000111,%11111111,
%11100000,%00000001,%11111111,
%11000000,%00000000,%11111111,
%11000000,%00000000,%11111111,
%10000000,%00000000,%01111111,
%10000000,%00000000,%01111111,
%10000000,%00000000,%01111111,
%10000000,%00000000,%01111111,
%10000000,%00000000,%01111111,
%10000000,%00000000,%01111111,
%10000000,%00000000,%01111111,
%10000000,%00000000,%01111111,
%11000000,%00000000,%11111111,
%11000000,%00000000,%11111111,
%11100000,%00000001,%11111111,
%11111000,%00000111,%11111111
]

byte array mask2[0] = [
%11111100,%00000011,%11111111,
%11110000,%00000000,%11111111,
%11100000,%00000000,%01111111,
%11100000,%00000000,%01111111,
%11000000,%00000000,%00111111,
%11000000,%00000000,%00111111,
%11000000,%00000000,%00111111,
%11000000,%00000000,%00111111,
%11000000,%00000000,%00111111,
%11000000,%00000000,%00111111,
%11000000,%00000000,%00111111,
%11000000,%00000000,%00111111,
%11100000,%00000000,%01111111,
%11100000,%00000000,%01111111,
%11110000,%00000000,%11111111,
%11111100,%00000011,%11111111
]
byte array mask3[0] = [
%11111110,%00000001,%11111111,
%11111000,%00000000,%01111111,
%11110000,%00000000,%00111111,
%11110000,%00000000,%00111111,
%11100000,%00000000,%00011111,
%11100000,%00000000,%00011111,
%11100000,%00000000,%00011111,
%11100000,%00000000,%00011111,
%11100000,%00000000,%00011111,
%11100000,%00000000,%00011111,
%11100000,%00000000,%00011111,
%11100000,%00000000,%00011111,
%11110000,%00000000,%00111111,
%11110000,%00000000,%00111111,
%11111000,%00000000,%01111111,
%11111110,%00000001,%11111111
]
byte array mask4[0] = [
%11111111,%00000000,%11111111,
%11111100,%00000000,%00111111,
%11111000,%00000000,%00011111,
%11111000,%00000000,%00011111,
%11110000,%00000000,%00001111,
%11110000,%00000000,%00001111,
%11110000,%00000000,%00001111,
%11110000,%00000000,%00001111,
%11110000,%00000000,%00001111,
%11110000,%00000000,%00001111,
%11110000,%00000000,%00001111,
%11110000,%00000000,%00001111,
%11111000,%00000000,%00011111,
%11111000,%00000000,%00011111,
%11111100,%00000000,%00111111,
%11111111,%00000000,%11111111
]
byte array mask5[0] = [
%11111111,%10000000,%01111111,
%11111110,%00000000,%00011111,
%11111100,%00000000,%00001111,
%11111100,%00000000,%00001111,
%11111000,%00000000,%00000111,
%11111000,%00000000,%00000111,
%11111000,%00000000,%00000111,
%11111000,%00000000,%00000111,
%11111000,%00000000,%00000111,
%11111000,%00000000,%00000111,
%11111000,%00000000,%00000111,
%11111000,%00000000,%00000111,
%11111100,%00000000,%00001111,
%11111100,%00000000,%00001111,
%11111110,%00000000,%00011111,
%11111111,%10000000,%01111111
]
byte array mask6[0] = [
%11111111,%11000000,%00111111,
%11111111,%00000000,%00001111,
%11111110,%00000000,%00000111,
%11111110,%00000000,%00000111,
%11111100,%00000000,%00000011,
%11111100,%00000000,%00000011,
%11111100,%00000000,%00000011,
%11111100,%00000000,%00000011,
%11111100,%00000000,%00000011,
%11111100,%00000000,%00000011,
%11111100,%00000000,%00000011,
%11111100,%00000000,%00000011,
%11111110,%00000000,%00000111,
%11111110,%00000000,%00000111,
%11111111,%00000000,%00001111,
%11111111,%11000000,%00111111
]
byte array mask7[0] = [
%11111111,%11100000,%00011111,
%11111111,%10000000,%00000111,
%11111111,%00000000,%00000011,
%11111111,%00000000,%00000011,
%11111110,%00000000,%00000001,
%11111110,%00000000,%00000001,
%11111110,%00000000,%00000001,
%11111110,%00000000,%00000001,
%11111110,%00000000,%00000001,
%11111110,%00000000,%00000001,
%11111110,%00000000,%00000001,
%11111110,%00000000,%00000001,
%11111111,%00000000,%00000011,
%11111111,%00000000,%00000011,
%11111111,%10000000,%00000111,
%11111111,%11100000,%00011111
]


byte array sprite0[0] = [
%00000111,%11100000,%00000000,
%00011000,%00011000,%00000000,
%00100000,%00000100,%00000000,
%01000011,%00000010,%00000000,
%01000100,%00000010,%00000000,
%10001000,%00000001,%00000000,
%10001000,%00000001,%00000000,
%10000000,%00000001,%00000000,
%10000000,%00000001,%00000000,
%10000000,%00000001,%00000000,
%10000000,%00000001,%00000000,
%01000000,%00000010,%00000000,
%01000000,%00000010,%00000000,
%00100000,%00000100,%00000000,
%00011000,%00011000,%00000000,
%00000111,%11100000,%00000000
]

byte array sprite1[0] = [
%00000011,%11110000,%00000000,
%00001100,%00001100,%00000000,
%00010000,%00000010,%00000000,
%00100001,%10000001,%00000000,
%00100010,%00000001,%00000000,
%01000100,%00000000,%10000000,
%01000100,%00000000,%10000000,
%01000000,%00000000,%10000000,
%01000000,%00000000,%10000000,
%01000000,%00000000,%10000000,
%01000000,%00000000,%10000000,
%00100000,%00000001,%00000000,
%00100000,%00000001,%00000000,
%00010000,%00000010,%00000000,
%00001100,%00001100,%00000000,
%00000011,%11110000,%00000000
]

byte array sprite2[0] = [
%00000001,%11111000,%00000000,
%00000110,%00000110,%00000000,
%00001000,%00000001,%00000000,
%00010000,%11000000,%10000000,
%00010001,%00000000,%10000000,
%00100010,%00000000,%01000000,
%00100010,%00000000,%01000000,
%00100000,%00000000,%01000000,
%00100000,%00000000,%01000000,
%00100000,%00000000,%01000000,
%00100000,%00000000,%01000000,
%00010000,%00000000,%10000000,
%00010000,%00000000,%10000000,
%00001000,%00000001,%00000000,
%00000110,%00000110,%00000000,
%00000001,%11111000,%00000000
]

byte array sprite3[0] = [
%00000000,%11111100,%00000000,
%00000011,%00000011,%00000000,
%00000100,%00000000,%10000000,
%00001000,%01100000,%01000000,
%00001000,%10000000,%01000000,
%00010001,%00000000,%00100000,
%00010001,%00000000,%00100000,
%00010000,%00000000,%00100000,
%00010000,%00000000,%00100000,
%00010000,%00000000,%00100000,
%00010000,%00000000,%00100000,
%00001000,%00000000,%01000000,
%00001000,%00000000,%01000000,
%00000100,%00000000,%10000000,
%00000011,%00000011,%00000000,
%00000000,%11111100,%00000000
]

byte array sprite4[0] = [
%00000000,%01111110,%00000000,
%00000001,%10000001,%10000000,
%00000010,%00000000,%01000000,
%00000100,%00110000,%00100000,
%00000100,%01000000,%00100000,
%00001000,%10000000,%00010000,
%00001000,%10000000,%00010000,
%00001000,%00000000,%00010000,
%00001000,%00000000,%00010000,
%00001000,%00000000,%00010000,
%00001000,%00000000,%00010000,
%00000100,%00000000,%00100000,
%00000100,%00000000,%00100000,
%00000010,%00000000,%01000000,
%00000001,%10000001,%10000000,
%00000000,%01111110,%00000000
]

byte array sprite5[0] = [
%00000000,%00111111,%00000000,
%00000000,%11000000,%11000000,
%00000001,%00000000,%00100000,
%00000010,%00011000,%00010000,
%00000010,%00100000,%00010000,
%00000100,%01000000,%00001000,
%00000100,%01000000,%00001000,
%00000100,%00000000,%00001000,
%00000100,%00000000,%00001000,
%00000100,%00000000,%00001000,
%00000100,%00000000,%00001000,
%00000010,%00000000,%00010000,
%00000010,%00000000,%00010000,
%00000001,%00000000,%00100000,
%00000000,%11000000,%11000000,
%00000000,%00111111,%00000000
]

byte array sprite6[0] = [
%00000000,%00011111,%10000000,
%00000000,%01100000,%01100000,
%00000000,%10000000,%00010000,
%00000001,%00001100,%00001000,
%00000001,%00010000,%00001000,
%00000010,%00100000,%00000100,
%00000010,%00100000,%00000100,
%00000010,%00000000,%00000100,
%00000010,%00000000,%00000100,
%00000010,%00000000,%00000100,
%00000010,%00000000,%00000100,
%00000001,%00000000,%00001000,
%00000001,%00000000,%00001000,
%00000000,%10000000,%00010000,
%00000000,%01100000,%01100000,
%00000000,%00011111,%10000000
]

byte array sprite7[0] = [
%00000000,%00001111,%11000000,
%00000000,%00110000,%00110000,
%00000000,%01000000,%00001000,
%00000000,%10000110,%00000100,
%00000000,%10001000,%00000100,
%00000001,%00010000,%00000010,
%00000001,%00010000,%00000010,
%00000001,%00000000,%00000010,
%00000001,%00000000,%00000010,
%00000001,%00000000,%00000010,
%00000001,%00000000,%00000010,
%00000000,%10000000,%00000100,
%00000000,%10000000,%00000100,
%00000000,%01000000,%00001000,
%00000000,%00110000,%00110000,
%00000000,%00001111,%11000000
]

word array mask[0] = [
  mask0,
  mask1,
  mask2,
  mask3,
  mask4,
  mask5,
  mask6,
  mask7
]

word array sprite[0] = [
  sprite0,
  sprite1,
  sprite2,
  sprite3,
  sprite4,
  sprite5,
  sprite6,
  sprite7
]

byte array backbuffer[400] // 8 * 50

word time
byte xn

word xf,yf
word xstep, ystep

word array xfp[8]
word array yfp[8]
word array xfstep[8]
word array yfstep[8]

byte index
byte max

procedure initX()
local x,i
begin
  for i:=0 to max do
  begin
    xfstep[i] := @random(24)+24
    x := @random(303)
    xfp[i] := x * 64
  end
end

function @getX(index)
local x
begin
  xstep := xfstep[index]
  xf := xfp[index]

  xf:=xf + xstep

  x := xf / 64

  if xf < 0 then
  begin
    xstep := @neg(xstep)
    xf := 0
    x := 0
  end

  if x > 304 then
  begin
    xstep := @neg(xstep)
//      xf := 304 * 64
//      x := 304
  end

  xfstep[index] := xstep
  xfp[index] := xf
  return x
end


procedure initY()
local y,i
begin
  for i:=0 to max do
  begin
    yfstep[i] := 1
    y:=10
    yfp[i] := y * 64
  end
end


function @getY(index)
local y
begin
  ystep := yfstep[index]
  yf := yfp[index]
  yf:=yf + ystep

  ystep := ystep + 1

  y := yf / 64

  if yf < 0 then
  begin
    ystep := @neg(ystep)
    yf := 0
    y := 0
  end

  if yf > 9152 then // 159 - 16
  begin
    ystep := @neg(ystep)

// Ausgleich, sonst stossen wir irgendwann oben gegen
    @printf("ystep:%d \n", ystep)
    ystep := ystep + 10
    yf := 9152
//      y := 143
  end

  if yf == 9152 and ystep > -5 and ystep < 3 then
  begin
    ystep := -131
  end
  yfstep[index] := ystep
  yfp[index] := yf
  return y
end


begin
  @graphics(8)
  createGitter()

  @starttime()
  max := 1

  initX()
  initY()

  for i:=0 to 15000 do    // 159 - 16
  begin
    x := @getX(0)

    xp := x / 8
    xn := x & 7

    yp := @getY(0)

    @setsprite(xp, yp, sprite[xn], mask[xn], adr:backbuffer)

//    @printf("x:%d xp:%d, xn:%d, y:%d\n",x,xp,xn,y)
//    @printf("x:%d, y:%d xstep:%d ystep:%d \n", x, y, xfstep, yfstep)
    @waitline(100)

    @clearsprite(adr:backbuffer)
  end

  time:=@stoptime()

  @graphics(0)

  @showgiventime(time)

  assert( time > 149, "sprite speed: wir werden schneller")
  assert( time < 152, "sprite speed: wir werden langsamer")

  @exit(@getAsserts())
end

include "SCREEN_OUTPUT.INC"
include "PRINTF.INC"
include "GRAPHICS.INC"
include "GFX1BIT.INC"
include "MATH.INC"
include "BLITTER.INC"
include "RANDOM.INC"
include "BASIC.INC"
include "TIME.INC"
// RUNTIME.INC wird automatisch angehaengt
